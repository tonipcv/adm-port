generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String?        @unique
  password               String?
  whatsapp               String?
  whatsappVerified       Boolean        @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  emailToken             String?        @unique
  emailTokenExpiry       DateTime?
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  resetToken             String?
  resetTokenExpiry       DateTime?
  stripeCustomerId       String?        @unique
  subscriptionStatus     String?        @default("free")
  subscriptionId         String?
  subscriptionEndDate    DateTime?
  level                  String?
  exchange               String?
  traditional_investment String?
  crypto_investment      String?
  discovery              String?
  onboardingCompleted    Boolean        @default(false)
  provider               String?
  accounts               Account[]
  sessions              Session[]
  portfolios            Portfolio[]
  conversations         Conversation[]

  @@map("User")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  totalValue  Float    @default(0)
  totalProfit Float    @default(0)
  userId      String
  cryptos     Crypto[]
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Crypto {
  id                       String    @id @default(cuid())
  coinId                   String
  amount                   Float
  investedValue            Float
  averagePrice             Float     @default(0)
  currentPrice             Float     @default(0)
  profit                   Float     @default(0)
  priceChangePercentage24h Float?
  priceChangePercentage7d  Float?
  marketCap                Float?
  totalVolume              Float?
  image                    String?
  name                     String?
  symbol                   String?
  portfolioId              String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  portfolio                Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([coinId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  createdAt      DateTime    @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId])
}
